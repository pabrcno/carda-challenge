services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: carda-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: carda_challenge
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - carda-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d carda_challenge"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for heart rate data buffering
  redis:
    image: redis:7-alpine
    container_name: carda-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - carda-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: carda-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@carda.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - carda-network
    depends_on:
      postgres:
        condition: service_healthy

  # Application (optional - for production deployment)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: carda-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/carda_challenge
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PORT: 3000
    ports:
      - "3000:3000"
    networks:
      - carda-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  carda-network:
    driver: bridge
